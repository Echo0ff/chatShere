# ChatSphere 生产环境 Docker Compose

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: chatsphere-postgres-prod
    environment:
      POSTGRES_DB: chatsphere_prod
      POSTGRES_USER: chatsphere
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - chatsphere-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatsphere -d chatsphere_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: chatsphere-redis-prod
    command: redis-server --appendonly yes --requirepass-file /run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis_prod_data:/data
    networks:
      - chatsphere-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: chatsphere-backend-prod
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - REDIS_URL_FILE=/run/secrets/redis_url
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - DEBUG=false
      - ENVIRONMENT=production
      - CORS_ORIGINS=https://yourdomain.com
    secrets:
      - database_url
      - redis_url
      - secret_key
    volumes:
      - backend_prod_logs:/app/logs
      - backend_prod_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chatsphere-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # 前端服务 (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: chatsphere-frontend-prod
    depends_on:
      - backend
    networks:
      - chatsphere-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: chatsphere-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - chatsphere-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# 密钥管理
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  database_url:
    file: ./secrets/database_url.txt
  redis_url:
    file: ./secrets/redis_url.txt
  secret_key:
    file: ./secrets/secret_key.txt

# 数据卷
volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_logs:
    driver: local
  backend_prod_uploads:
    driver: local
  nginx_prod_logs:
    driver: local

# 网络
networks:
  chatsphere-prod:
    driver: bridge
    name: chatsphere-prod-network
