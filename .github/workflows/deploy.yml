# ChatSphere CI/CD Pipeline
name: 🚀 ChatSphere CI/CD

# 触发条件
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# 环境变量
env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/chatsphere-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/chatsphere-frontend
  SERVER_IP: 49.232.202.209

jobs:
  # 代码质量检查
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    # 后端测试
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 安装 uv
      run: pip install uv

    - name: 安装后端依赖
      working-directory: ./backend
      run: uv sync --dev

    - name: 后端代码检查
      working-directory: ./backend
      run: |
        uv run black --check .
        uv run isort --check-only .
        uv run mypy src/

    - name: 后端测试
      working-directory: ./backend
      run: uv run pytest tests/ -v --cov=src/

    # 前端测试
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 安装前端依赖
      working-directory: ./frontend
      run: npm ci

    - name: 前端代码检查
      working-directory: ./frontend
      run: npm run lint

    - name: 前端构建测试
      working-directory: ./frontend
      run: npm run build

  # 构建 Docker 镜像
  build-images:
    name: 🐳 Build Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push'

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录 Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/chatsphere-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 构建并推送镜像
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        target: ${{ github.ref == 'refs/heads/main' && 'production' || 'testing' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-testing:
    name: 🧪 Deploy to Testing
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: testing

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到测试服务器
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ env.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/chatsphere

          # 备份当前配置
          cp docker-compose.test.yml docker-compose.test.yml.backup || echo "No file to backup"

          # 拉取最新代码
          git pull origin develop

          # 拉取最新镜像
          docker-compose -f docker-compose.test.yml pull

          # 重启服务
          docker-compose -f docker-compose.test.yml down || true
          docker-compose -f docker-compose.test.yml up -d

          # 等待服务启动
          sleep 30

          # 健康检查
          curl -f http://localhost/health || exit 1

          echo "✅ 测试环境部署成功! 访问地址: http://${{ env.SERVER_IP }}"

  # 部署到生产环境
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到生产服务器
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ env.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/chatsphere

          # 备份当前配置
          cp docker-compose.prod.yml docker-compose.prod.yml.backup || echo "No file to backup"

          # 拉取最新代码
          git pull origin main

          # 拉取最新镜像
          docker-compose -f docker-compose.prod.yml pull

          # 滚动更新后端服务
          docker-compose -f docker-compose.prod.yml up -d --no-deps backend
          sleep 20

          # 健康检查后端
          curl -f http://localhost/api/health || exit 1

          # 更新前端服务
          docker-compose -f docker-compose.prod.yml up -d --no-deps frontend nginx
          sleep 10

          # 最终健康检查
          curl -f http://${{ env.SERVER_IP }}/health || exit 1

          # 清理旧镜像
          docker image prune -f

          echo "✅ 生产环境部署成功! 访问地址: http://${{ env.SERVER_IP }}"

  # 部署后通知
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-testing, deploy-production]
    if: always()

    steps:
    - name: 发送部署通知
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          ChatSphere 部署状态: ${{ job.status }}
          环境: ${{ github.ref == 'refs/heads/main' && '生产环境' || '测试环境' }}
          服务器: ${{ env.SERVER_IP }}
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
          作者: ${{ github.actor }}
          访问地址: http://${{ env.SERVER_IP }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
