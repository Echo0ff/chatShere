# ChatSphere CI/CD Pipeline
name: 🚀 ChatSphere CI/CD

# 触发条件
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 环境变量
env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/chatsphere-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/chatsphere-frontend
  SERVER_IP: 49.232.202.209
  SERVER_PORT: 8999

jobs:
  # 基础验证（简化版）
  validate:
    name: ✅ Validate Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 验证前端构建
      working-directory: ./frontend
      run: |
        npm install
        npm run build
        echo "✅ 前端构建验证通过"

    - name: 验证后端依赖
      working-directory: ./backend
      run: |
        pip install uv
        uv sync --no-dev
        echo "✅ 后端依赖验证通过"

  # 构建并推送 Docker 镜像
  build-and-push:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录 Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 构建并推送后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        target: production
        platforms: linux/amd64
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 构建并推送前端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        target: production
        platforms: linux/amd64
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest
        build-args: |
          VITE_API_URL=http://${{ env.SERVER_IP }}:${{ env.SERVER_PORT }}
          VITE_WS_URL=ws://${{ env.SERVER_IP }}:${{ env.SERVER_PORT }}
          VITE_APP_NAME=ChatSphere
          VITE_ENVIRONMENT=production
          VITE_DEBUG=false
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 测试环境部署（暂时注释）
  # deploy-testing:
  #   name: 🧪 Deploy to Testing
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/develop'
  #   environment: testing
  #   steps:
  #   - name: 部署到测试服务器
  #     run: echo "测试环境部署暂时禁用"

  # 部署到生产环境
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 部署到生产服务器
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ env.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo "🚀 开始 ChatSphere 生产环境部署..."

          # 进入部署目录
          cd /data/chatsphere

          # 检查 Docker Compose 命令
          if command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE_CMD="docker-compose"
          else
            DOCKER_COMPOSE_CMD="docker compose"
          fi
          echo "🐳 使用 Docker Compose 命令: $DOCKER_COMPOSE_CMD"

          # 登录 Docker Registry
          echo "🔐 登录 Docker Registry..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # 拉取最新镜像
          echo "📥 拉取最新镜像..."
          $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml pull backend frontend

          # 重新启动服务
          echo "🔄 重新启动服务..."
          $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml down
          $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml up -d

          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 60

          # 健康检查
          echo "🏥 健康检查..."
          for i in {1..10}; do
            if curl -f http://localhost:${{ env.SERVER_PORT }}/health &>/dev/null; then
              echo "✅ 健康检查通过"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ 健康检查失败"
              $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml logs --tail=20
              exit 1
            fi
            echo "⏳ 等待服务启动... ($i/10)"
            sleep 10
          done

          # 显示服务状态
          echo "📊 服务状态:"
          $DOCKER_COMPOSE_CMD -f docker-compose.prod.yml ps

          # 清理旧镜像
          echo "🧹 清理旧镜像..."
          docker image prune -f

          echo "🎉 部署完成!"
          echo "🌐 访问地址: http://${{ env.SERVER_IP }}:${{ env.SERVER_PORT }}"

  # 部署后通知（可选）
  # notify:
  #   name: 📢 Notify
  #   runs-on: ubuntu-latest
  #   needs: [deploy-production]
  #   if: always()
  #   steps:
  #   - name: 发送部署通知
  #     run: echo "部署通知功能暂时禁用"
