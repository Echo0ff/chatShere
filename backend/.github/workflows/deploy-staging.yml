name: Deploy to Staging Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SERVER_HOST: 49.232.202.209
  SERVER_USER: root
  APP_PATH: /opt/chatsphere
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: chatsphere

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: chatsphere_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd backend
        poetry install --no-interaction --no-ansi
    
    - name: Run tests
      run: |
        cd backend
        cp .env.testing .env
        poetry run pytest tests/ -v --cov=. --cov-report=xml
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile.staging
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ env.SERVER_HOST }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          
          # 创建应用目录
          mkdir -p ${{ env.APP_PATH }}
          cd ${{ env.APP_PATH }}
          
          # 备份当前版本
          if [ -d "current" ]; then
            rm -rf backup
            mv current backup
          fi
          
          # 克隆最新代码
          git clone https://github.com/${{ github.repository }}.git current || (cd current && git pull)
          cd current/backend
          
          # 复制环境配置
          cp .env.staging .env
          
          # 停止旧服务
          docker-compose -f docker-compose.staging.yml down || true
          
          # 清理旧镜像
          docker system prune -f
          
          # 拉取最新镜像
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          
          # 更新docker-compose文件中的镜像标签
          sed -i "s|chatsphere:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}|g" docker-compose.staging.yml
          
          # 启动新服务
          docker-compose -f docker-compose.staging.yml up -d
          
          # 等待服务启动
          sleep 30
          
          # 健康检查
          curl -f http://localhost/health || exit 1
          
          echo "部署完成！"
          echo "应用访问地址: http://${{ env.SERVER_HOST }}"
          echo "监控面板: http://${{ env.SERVER_HOST }}:3000"
          echo "容器管理: http://${{ env.SERVER_HOST }}:9000"

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
          echo "✅ 部署成功到预发布环境"
          echo "🔗 应用地址: http://${{ env.SERVER_HOST }}"
        else
          echo "❌ 部署失败"
          exit 1 